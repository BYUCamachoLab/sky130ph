<?xml version="1.0" encoding="utf-8"?>
<klayout-macro>
 <description>import_sky130ph_PCells</description>
 <version/>
 <category>pymacros</category>
 <prolog/>
 <epilog/>
 <doc/>
 <autorun>false</autorun>
 <autorun-early>false</autorun-early>
 <shortcut/>
 <show-in-menu>true</show-in-menu>
 <group-name/>
 <menu-path>sky130ph.begin</menu-path>
 <interpreter>python</interpreter>
 <dsl-interpreter-name/>
 <text>
from typing import Callable
import pya
import sys
import pathlib
import os
from inspect import Parameter, signature, Signature
import json
import numpy as np

config_file = os.path.expanduser(pathlib.Path('~/.gdsfactory/gf-config.json'))

cfg = {}
with open(config_file, 'a+') as j:
    j.seek(0)
    try:
        cfg = json.loads(j.read())
    except:
        cfg = {}

    if "conda-env" not in cfg.keys():
        env_dir_str = pya.FileDialog.ask_existing_dir("Select directory of Python environment to link:", "")

        if env_dir_str is None:
            quit()

        cfg["conda-env"] = env_dir_str

        json.dump(cfg, j, sort_keys=True, indent=4)
j.close()

env_dir = pathlib.Path(cfg["conda-env"])

if env_dir is None:
    quit()

sys.path.append(str(pathlib.Path(f'{env_dir}/site-packages/')))

try:
    import flayout as fl
    from flayout.pcell import _klayout_type, _validate_parameter, _validate_on_error, copy_tree
    import gdsfactory as gf
    import sky130ph.components as skyc
except Exception as e:
    pya.MessageBox.info('import error', str(e), pya.MessageBox.Ok)

# Create layout for the library
layout = pya.Layout()

# PCell class that creates the PCell
class PCellFactory(pya.PCellDeclarationHelper):
    def __init__(self, component) -> None:
        """Create a PCell from a gdsfactory component."""
        super().__init__()
        self.component = component
        self.sig = self._extract_sig(self.component) or {}
        self.func_name = self.gdsfactory_to_klayout().name
        params = self._pcell_parameters(self.sig, on_error="raise")
        self._param_keys = list(params.keys())
        self._param_values = []
        for name, param in params.items():
            # Add the parameter to the PCell
            self._param_values.append(
                self.param(
                    name=name,
                    value_type=_klayout_type(param),
                    description=name.replace("_", " "),
                    default=param.default,
                )
            )

    def produce_impl(self):
        """Produce the PCell."""
        params = dict(zip(self._param_keys, self._param_values))
        cell = self.gdsfactory_to_klayout(**params)

        # Add the cell to the layout
        copy_tree(cell, self.cell, on_same_name="replace")
        self.cell.name = self.func_name

    def _pcell_parameters(self, sig: Signature, on_error="ignore"):
        """Get the parameters of a function."""
        # NOTE: There could be a better way to do this, than use __signature__.
        new_params = {}

        if len(sig.parameters) == 0:
            return new_params

        new_params = {'name': Parameter('name', kind=Parameter.KEYWORD_ONLY, default=self.func_name, annotation=str)}
        params = sig.parameters
        on_error = _validate_on_error(on_error)
        for name, param in params.items():
            try:
                new_params[name] = _validate_parameter(name, param)
            except ValueError:
                if on_error == "raise":
                    raise
        return new_params

    def _extract_sig(self, component):
        """Extract the signature of a function."""
        sig = signature(component[1])
        ignore_params = []
        params = sig.parameters

        for name, param in params.items():
            try:
                _validate_parameter(name, param)
            except:
                # Ignore parameters that are not accepted by KLayout
                ignore_params.append(name)

        ignore_params.append('cross_section')

        sig_new = Signature(
            [param for name, param in params.items() if name not in ignore_params]
        ) or {}
        return sig_new

    def gdsfactory_to_klayout(self, **kwargs):
        gf.clear_cache()  # Clear cache to be able to reload components without changing the name

        # Get the component
        print(cells)
        c = self.component[1](**kwargs)
        c.name = self.component[0]

        # Get the cell
        top = layout.create_cell(c.name)
        polygons = c.get_polygons(True)
        for layer, polygons in polygons.items():
            layer_idx = layout.layer(*layer)

            # Add pya.Polygon for every gdsfactory Polygon
            for polygon in polygons:
                polygon = np.array(polygon)
                polygon = polygon * 1000
                points_pya = [pya.Point(*p) for p in polygon]
                top.shapes(layer_idx).insert(pya.Polygon(points_pya))

        top.name = c.name
        top.__doc__ = self.component[1].__doc__.split('\n\n')[0] # Cell description is the first line of the docstring
        return top

cells = gf.get_cells(skyc)
cells.pop('_dbr_cell')
cells.pop('get_component')
generic_lib = fl.library(
    "Skywater 130 Photonics PDK",
    pcells=[],
    cells=[],
    description="Skywater 130 photonics PCell Library",
)
# Would be nice to add SiEPIC pins to all of these
pb = pya.AbsoluteProgress("Importing sky130ph components", len(cells.keys()))
for i, cell in enumerate(cells.items()):

    pb.set(i / len(cells.items()) * 100, True)

    try:
         # Cell function signature, used by flayout

        func = PCellFactory(cell) # Cell function
        generic_lib.layout().register_pcell(cell[0], func) # Register the PCell

    except Exception as e:
        raise e # Ignore components that cannot be converted to PCells
pb.set(100, True)
</text>
</klayout-macro>
